[comment]: # (start_post)

## Useful Spookiness - Part 1

#### Why encryption works and is unbreakable with a classical computer

By now you are agog at the strangeness of the universe, and disappointed that we haven't yet found a way to use it for "subspace communication" as in Star Trek.

But this strangeness isn't just a profound curiosity. We can use it to really hurt ourselves! Before we go there however, we need to understand how how encryption makes the modern financial system possible. 

Later, in other posts, we are going to show how quantum mechanics will ruin (and then save, at least partially) the financial system.

But first, we need to learn about how encryption works.

If you have ever visited a website that started with "https", then the little "s" is supposed to vouch for the fact that your channel is secure. But what does the "s" actually do? It allows the person sending you info to encrypt their information (such as bank account numbers) into gibberish that only you can un-encrypt.

Surely, given a big enough computer one could "break" this encryption, right? That's what all the movies tell me about some guy furiously typing on a keyboard while a missile approaches...

As we are about to see, the magic of number theory and exponentials will make our current forms of encryption virtually unbreakable with a classical computer, in the same sense that we never observe all the air molecules in a room rushing to one side. We will see that compute power is _also_ scaling exponentially, but encryption should win that foot race too, at least for a while.

So encryption. Let's say I have a string of letters e.g. "My bank account PIN is 1234" (for the record, it isn't.) Let's just shorten the phrase to '1234' in this example so we can use the familiar base 10 number system. Now I am going to get a wheel that has 10 positions, 0-9, like a tumbler on a safe. If I "spin" each digit in the original number 1234 by some random (but known) amount, I could turn the phrase into another number, which would be gibberish to anyone else. I could use the amount I spun each number as the key - "reversing" the spin would give me back my original number. I could publish the gibberish any place I like now - you won't be able to use it unless you have the key (which consists of two pieces; the tumbler size and the amount of each "spin".)

Couldn't I just try every combination to undo the gibberish? Well, if I make the number much bigger, then effectively you can't. That's a Monkey at Typewriters problem, like trying to crack a safe by trying all combinations. We can make both the size and the number of tumblers extremely large with modern computing. As a quick calculation, if I use a 2048 bit key (so $2^{2048} \sim 10^{614}$), and the biggest supercomputers [today, late 2024](https://www.rdworldonline.com/an-overview-of-the-late-2024-supercomputing-landscape-in-6-charts/) are _exaflop_ ($10^{18}$ floating point operations per second, or _flops_), and assuming each try is about one floating point operation (it isn't, but close enough for this argument), then we would need $10^{614-18} \sim 10^{600}$s to crack the combination via brute force on the fastest supercomputer (nation-state, or Google/Meta level) today. The lifetime of the universe is around $3\times 10^{17}$ s (let's round it up to $10^{18}$ s), so you can see just how impossible this would be (even if I am off several orders of magnitude in either direction.) We will come back to this below, but for now just accept that brute force isn't going to work.

This [one-time pad](https://en.wikipedia.org/wiki/One-time_pad) approach works well, but having a random number I need to keep around each and every time I want to encrypt a message is going to be a hassle. And anyway, how would I transmit the key to the other person securely? So I need a better method. That would be [RSA](https://en.wikipedia.org/wiki/RSA_(cryptosystem)) (Rivest–Shamir–Adleman) encryption.

We will show below that the security of RSA encryption depends on the fact that it hard to factor an integer into its set of prime numbers. That's basically it. And the fact that I can make cracking RSA take exponentially more operations by adding a linear amount to the keys - that guarantees as computers get faster and faster, I can say, double the key length (which only adds a linear amount of time to encrypt/decrypt) but nearly squares the time (and energy) it takes to brute-force the key. 

Except if you have a quantum computer. But let's not get ahead of ourselves.

Let's look at exactly how public key encryption works. In public key encryption, there are two keys. The public key is like a mailbox - it lets you take a message and drop it easily into a box (the encrypted message) but makes it effectively impossible to get the message out without the mailman's key (the private key.) The mailman never needs to give out his key (of course, if someone steals his key and makes a copy, the thief can get in the mailbox too, so the private key shouldn't be written down on a sticky note on your monitor...)

Consider 1234 again. I need a "tumbler" to encrypt 1234 - "modulo" arithmetic will help us here. If you work with computers, you already know that each byte can only contain a certain number of values before it "overflows". If I look at say 4 bits of an 8-bit byte (the "nibble") I can hold 0-15 (represented by 0-9,A-F), the hexadecimal system. If I add, say, 6 decimal to 10 decimal, the value I get is 16 decimal, or 10 hex. The lowest 4 bits are back to 0, so it "rolled over". "Modulo" arithmetic is basically looking at the rolled-over bits and ignoring the larger parts of the number. That's what a tumbler on a safe does too - once I spin it all the way around it comes back the the same value.

Formally, any number $a$ on my dial of $N$ positions, starting at a point $a'$ can be represented as:

$$a = a' + xN$$

where $x$ is an integer (...,-2,-1,0,1,2,...). Every time I spin the dial all the way around to the beginning, I get the same number back. This is called a _congruence class_ in modular arithmetic. We will be using congruence a lot from here on. 

If we agreed that our tumbler has say, $N>1234$, values (one piece of the public key), and I told you the message was "1235", the "key" would be -1 to get back to 1234 (our actual message.) Equivalently, I could have told you $-1\pm xN$, where $x$ is an integer, and that would work as well. 

In this case, there really isn't a way to guess "-1" is the solution. That's not the case in the "real world" of course, because our actual messages contain more than random numbers - a spy could try all the positions and look for, say, English words in the output, and crack our code. Still we could make this very hard by using a much larger key, but we haven't solved the problem of how to give the key to the sender (this is like having to give a copy of the mailbox key to the person putting the message in the box.) We need a "one-way" key that makes it easy to encrypt (drop mail in the box) but won't actually open the box.

So what we really want is a way to take a message $m$, turn it into gibberish with an agreed upon key, then transform it back into $m$ with another simple operation that relies on a "secret". 

Using math notation, we want to make a function pair:

$$f_d(f_e(m)) = m$$

where $f_e$ is our public _encryption_ function, and $f_d$ is our secret _decryption_ function.

That is, two different sequential functions turn the message back into itself. There are an infinite number of ways to do this. For instance, the famous [Caeser cipher](https://en.wikipedia.org/wiki/Caesar_cipher) using the 26 letters of the Roman alphabet is: 

$$f_e = m + 3 \mod 26$$

So, if letter in the alphabet is assigned a number ($A=1$, $B=2$, etc.), then $f_e(A) = D$. The letter "Z" rolls over to $f_e(Z) = C$. The big secret here is "3". And I can't give this out publicly, so even if we use a giant value it isn't what we want. 

Enter some number theory. First, above we were talking about tumblers where we added or subtracted from the current positions. We could also multiply to find the next position. For example, take our 10 position tumbler again - if I was at Position 3, and wanted to go to Position 9, I would say "multiply 3 by 3". If I wanted to get to position 7, I'd have to find a multiplier of 3 that gives remainder 7 modulo 10 (that would be 9 because 9*3 = 27 (-20, for modulo 10) = 7. 

This is where we get to something you wouldn't have guessed in a million years. It turns out under certain restrictions outlined below, I can find a modulo basis $p$ (i.e. "tumbler size") where:

$$a^p = a \mod p$$

for almost any number $a < p$. It means that if I multiply $a$ by itself enough times (again, modulo some tumbler-size $p$), I will always come back to $a$. And it turns out, if $p$ is a prime number, then it is always $a$ times itself $p$ times. 

This is Fermat's Little Theorem (not to be confused with [Fermat's Last Theorem](https://en.wikipedia.org/wiki/Fermat%27s_Last_Theorem).)

How can I convince you this is true? To prove this formula, we need a trick - something called "induction". Induction works by proving something works for 1, then if it works for $a$, it also works for $a+1$ (so, starting with 1, we have proven 2, and then 2 proves 3, etc. forever.) For the statement above $1^p = 1 \mod p$, so of course it works. If it works for $a$, what about $a+1$, i.e.:

$$(a+1)^p = a+1 \mod p$$

Now, we can use binomial expansion to evaluate the left part:

$$(a+1)^p = a^p + \begin{bmatrix}p \\ 1\end{bmatrix}a^{p-1} + ... \begin{bmatrix}p \\ p-1\end{bmatrix}a + 1$$

where the things in parentheses are "p choose n" binomial coefficients. We are about to throw them away so don't worry about them for now.

I can collect terms like this - just the first and last term in the expansion don't have a factor of p:

$$(a+1)^p = (a^p+1) + p\times(stuff)\mod p$$ 

Now, remember in modulo arithmetic, any number that divides evenly by $p$ is effectively 0. So we end up with:

$$(a+1)^p = a^p + 1\mod p$$

We assumed $a^p = a\mod p$ at the beginning, so

$$(a+1)^p = a+1\mod p$$

Ta dah! So the next integer after $a$ (i.e. $a+1$) also satisfies this relationship, provided $a^p = a\mod p$, which proves it for (almost) all values of $a$.

I say "almost", because if p isn't prime, then the numbers $a$ can't share a common factor with $p$ (so there are no primes in common with $a$ and $p$.) This is called "coprime". For now, take my word for it, but we are going to use coprimes below so take a moment to think about what it means.

Parenthetically, I think this proof by induction above is a little unsatisfying (I can't draw you a nice picture to show how it is intuitively correct.) But we are going to need it a lot below, so we are stuck with it.

So now we have a way to get a message $m$ back to itself. But we don't want to use this for encryption, because if we multiply a message $m$ a prime number of times modulo that prime, we'll end up with the exact same message, which isn't what we want. 

Remember we are searching for two operations; so, what if we could factor p into TWO prime numbers, p and q? Then, we could have:

$m^{pq} = m \mod pq$, provided $m$ is coprime with $pq$. Then, the sender calculates $m^p\mod pq$, and I calculate $(m^p)^q\mod pq$ and get $m$ back. In general $m^p$ is complete gibberish, and you can't use $m^p$ to guess $m$ easily with just $pq$.

Sounds great, right? Well, unfortunately we have made the mailbox incredibly easy to unlock. If I hand out both $pq$ and $p$ to the public, then it is trivial to calculate $q$. Even though $m^p$ is gibberish, my private key $q = pq/p$ is a joke, one simple division operation to calculate. So how do I make the public key not useful for calculating the private key?

The trick is to make the encryption exponent $e$ and and the decryption exponent $d$ inverses modulo some other (secret, impossible to guess) number. Note that this new "secret" modulus will still make $e$ and $d$ encrypt/decrypt $m$ correctly given $pq$ (the latter of which I _will_ hand out publicly.)

So, in other words, I really want,

$$(m^e)^d = m \mod pq$$

where $e$ and $d$ are not actually $p$ and $q$...

So, where would we start to look for $e$ and $d$? One hint is that $m^{p-1} = 1 \mod p$ (this is just Fermat's little theorem above, $m^p = m \mod p$.) So $(m^{p-1})^x = 1\mod p$ where $x$ is any integer. Of course, we don't want to work in $\mod p$ or $\mod q$, but $\mod pq$. So maybe we would find $m^{(p-1)(q-1)} = 1 \mod pq$ handy. But is that true? In fact, it is, although it isn't particularly obvious at first glance.

This is the most esoteric part of how the encryption scheme works. You can just "trust me bro" and skip down to The Rest of the Story, or read this Group Theory Interlude to see how we can prove this to be true. 

##### Group Theory Interlude

Believe it or not, that class we had in group theory in college is going to come in handy now ("we", right?.) Groups are these very general sets of objects that follow rules like "I combine two elements with an operator to get another element of the group", and "Every one of the objects has an inverse", etc. That seems pretty boring, so I once asked a math professor I had in college, "is group theory useful for something?" Unlike my high school teacher Mrs. Edwards, who we already met in [this post](everything-exponential), Professor Denlinger said very confidently "Yes!" So, of course I asked, "uh, like what?", to which he responded "I am not sure." So I was done with mathematicians at that point (I give him credit for at least knowing there were important applications...)

Anyway, back to our group theory class. First, take an integer $N$. A number is coprime with $N$ if it has no prime factors in common. For example, for $N=3\times 7=21$, the numbers $\{2,4,5,8,10,11,13,16,17,19,20\}$ are all co-prime with $N$ because they do not share any common factors with 3 or 7 (and of course 21 since by definition the numbers are less than this.) 

Now here is something that isn't going to be obvious unless you have thought about this before. The coprime integers with $N$ form a [_multiplicative group_](https://en.wikipedia.org/wiki/Multiplicative_group_of_integers_modulo_n). The count of these coprime factors is called the _totient_ of the group, denoted with the Greek letter $\phi$. In the above example, $\phi(21)=12$ (including 1 of course in the group).  

By definition, each member of a group has a multiplicative inverse. This means there is one unique member of the group, maybe itself, that when multiplied yields $xN+1$, where $x$ is an integer (i.e. $x \in Z$). For instance, the multiplicative inverses of the above set of numbers are: ${11,16,17,8,19,2,13,4,5,10,20}$. You can check a few of these yourself, e.g. $2\times 11 = 22 = 21+1$; $20\times 20 = 400 = 19\times 21+1$; $8\times 8 = 64 = 21\times 3+1$, etc.

Why do all the co-prime numbers less than $N$ form a multiplicative group? First we have to prove that for any two members of the group, $a$ and $b$, there is a $c$ coprime to $N$ such that $ab = c+xN$, $x \in Z$. That is, multiplying any two members of the group yields another member of the group modulo $N$ (so it is closed.) 

That's actually not hard to understand on first look, as the group contains every co-prime, and a product of co-primes is still co-prime relative to $N$. However, just taking $ab$ is probably going to yield a value $c>N$, so it is part of a congruence class (we have to subtract integer numbers of $N$ to get a number less than $N$ for our "representative" group.) Is every member of the congruence class of any member $a'=a+xN$ also coprime to $N$? That is, $\gcd(a,N)=\gcd(a',N)$? Turns out, if some $d$ divides $a$ and $N$, then $g$ divides $a+xN$, and vice versa. So indeed, all members of the congruence class $ab\equiv a'b' \mod N$ are co-prime to $N$, which by definition means they are part of the group. Phew!  

Next, we have to prove that there exists a case for every element $a$ a unique element $a_{inv}$ such that $aa_{inv}=1\mod N$. That requires yet another piece of esoterica called [Bezout's Identity](https://en.wikipedia.org/wiki/B%C3%A9zout%27s_identity). This states that there are integers $x$ and $y$ such that $ax + yN = 1$ when $a$ and $N$ are coprime. Since any number modulo $yN$ is a congruence class, then $ax$ is part of the group (from what we argued above), so we are left over with an integer multiple of $N$ different by one. So each inverse exists in the group.

So I declare the integers co-prime to $N$ a multiplicative group.

OK, since we just showed that every element has an inverse, the product of all group members together modulo $N$ has to be 1 as well. Each member $a_i$ and it's inverse $a_j$ appears once in the product, and each of these member/inverse pairs is $a_ia_j = 1 \mod N$ by definition. So the complete product of all members must contain the inverse for each element somewhere in the chain. We can group these as $(a_ia_j)=1$ so we get $1\cdot 1...1$ $\phi/2$ times.

Also, any factor $a$ (member of the group) when multiplied in this product creates another member of the group, so any factor just rearranges the order of the set, which contains exactly $\phi$ members. Thus $a^\phi = 1 \mod N$. Mathematically, 

$$\prod\limits_{i=1}^{\phi}a_i = 1 = \prod\limits_{i=1}^{\phi}aa_i = a^\phi\prod\limits_{i=1}^{\phi}a_i = a^\phi$$

That's the first part. The second part is that the totient $\phi(pq)$ is $(p-1)(q-1)$. Certainly, for any prime $\phi(p)=p-1$ (all the integers less than a prime number are co-prime by definition.) And since $p$ and $q$ are both prime, they by definition don't share any common factors. Thus all the combinations of the set of size $\phi(p)$ and $\phi(q)$ are valid members of the multiplicative group of co-primes to $pq$. So the overall totient has to be $\phi(pq)=\phi(p)\phi(q)$. That's the second part - $\phi(pq)=\phi(p)\phi(q) = (p-1)(q-1)$. And we just showed $a^\phi = 1 \mod pq$, so $a^{(p-1)(q-1)} = 1 \mod pq$.

How does this help? Every time we get a factor of $(p-1)(q-1)$ in the exponentiation of our message, we will end up with a factor of 1. So we just need a 1 left over somewhere to get our message back.
 
##### The Rest of the Story

Now we know the not-obvious-at-first-glance result that $a^{(p-1)(q-1)} = 1\mod pq$.

So, the clever inventors of RSA encryption observed that if we choose two factors in the totient group $e$ and $d$ such that $ed = 1 \mod (p-1)(q-1)$, then $ed = 1 + x(p-1)(q-1)$, where $x$ is some integer. Now we can see what happens when we try to exponentiate with $ed$ modulo $pq$ (note: _not_ $\mod (p-1)(q-1)$):

$$m^{ed} = m^{1+x(p-1)(q-1)} = m^{1+x\phi} = m(m^\phi)^x \mod pq$$

BUT, $m^\phi \mod pq = 1$, which we went to all the trouble of proving above. And 1 raised to any power is still 1.

Thus, 

$$(m^e)^d = m(1^x) = m \mod pq$$

which is public key RSA encryption. The encryptor (and hence decryptor) exponent has to be chosen from the totient group of $pq$, but that isn't a big restriction.

Note that $e$ and $d$ are NOT factors of $pq$, and unless you can calculate $(p-1)(q-1)$ (which requires factoring $pq$) your public message $m^e$ is safe from decryption.

So, there you have it. All that for how the little "s" in "https" works (and for sure I skipped a bunch of pre/post processing details.) It relies on the fact that I can tell you $pq$, and a public key $e$ based on the modulus $(p-1)(q-1)$, but the only way to get the decryption exponent is by factoring $pq$ into $p$ and $q$ (so you can calculate the value $(p-1)(q-1)$ and use $e$ to back-calculate $d$.) This is secure because the factorization of $pq$ into $p$ and $q$ turns out to be incredibly difficult for classical computers.

Just how difficult? It's estimated that by 2035, a [single supercomputer](https://www.nextbigfuture.com/2023/02/intel-and-amd-path-to-zettaflop-supercomputers.html)  could achieve $10^{21}$ flops (floating point operations per second; above we said that today we have examples of supercomputers that can do $10^{18}$ flops.) 

[comment]: # (Figure1)
** Figure 1 **: Computing power is trending exponentially too. Ruh-rho Scooby Do.

But RSA keys are now recommended to be $2^{3072} \sim 10^{920}$ long (although almost all of them are 2048 as of early 2025.) But if we try to just brute force the result, we end up with the time taking approximately $10^{920}/10^{21} \sim 10^{900}$ s, so, like, forever if you just try every possible value (remember: $\sim 10^{18}$ s is the lifetime of the universe.) Of course, we have algorithms that are much better than "just try every value" - the [record](https://en.wikipedia.org/wiki/RSA_numbers#RSA-250) right now is about 800 bit ($10^{250}$ values) in 2700 CPU core-years, each core having about 50 Mflops (so $~10^{16}$ total floating-point operations which would take several days on an exaflop nation-state supercomputer.) But that is still short of the $2^{3072} \sim 10^{920}$ that is going to be the default soon, and increasing to $2^{4096}$ isn't technologically hard. So we should be able to stay ahead of nation-state level supercomputers for some decades in the future (although any static file encrypted with a small (2048 and smaller) public key RSA will become vulnerable with shorter key lengths, so don't leave those lying about!)

Remember, too, that breaking public key encryption in real-ish-time (less than a day) would still be massively expensive and take a giant amount of power. So no Dorito-eating hacker is going to snoop your bank info with his server rack in his mom's basement any time soon. Your Uncle Sam might be able to approach this in a decade, but he would need a damn good reason, and even then I think fairly simple counter-measures (like updating certificates with longer RSA keys more frequently) would hold off attackers for a long time.

I'll also mention that [symmetric key encryption](https://en.wikipedia.org/wiki/Symmetric-key_algorithm) (where the same key is used to encrypt and decrypt) is basically unbreakable - factoring primes won't crack it. But you would need to exchange secure keys if you want to use it for communication purposes (your local, personal files will be fine, if you don't write your password on a sticky note on your monitor...)

Thus your financial info is safe from classical computers for now, provided we don't discover some new method of factoring large primes. 

Like with a quantum computer.

